definitions:
  entity.DoPayment:
    properties:
      currency:
        type: string
      fraud_status:
        type: string
      gross_amount:
        type: string
      merchant_id:
        type: string
      order_id:
        type: string
      payment_type:
        type: string
      status_code:
        type: string
      status_message:
        type: string
      transaction_id:
        type: string
      transaction_status:
        type: string
      transaction_time:
        type: string
      va_numbers:
        items:
          $ref: '#/definitions/entity.VaNumber'
        type: array
    type: object
  entity.MidtransNotificationRequest:
    properties:
      approval_code:
        type: string
      bank:
        type: string
      card_type:
        type: string
      channel_response_code:
        type: string
      channel_response_message:
        type: string
      currency:
        type: string
      eci:
        type: string
      fraud_status:
        type: string
      gross_amount:
        type: string
      masked_card:
        type: string
      merchant_id:
        type: string
      order_id:
        type: string
      payment_type:
        type: string
      signature_key:
        type: string
      status_code:
        type: string
      status_message:
        type: string
      transaction_id:
        type: string
      transaction_status:
        type: string
      transaction_time:
        type: string
    type: object
  entity.VaNumber:
    properties:
      bank:
        type: string
      va_number:
        type: string
    type: object
  input.BookingInput:
    properties:
      first_date_rent:
        type: string
      last_date_rent:
        type: string
      product_id:
        type: integer
      quantity:
        type: integer
    required:
    - first_date_rent
    - last_date_rent
    - product_id
    - quantity
    type: object
  input.CategoryInput:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  input.InputTopUp:
    properties:
      amount:
        type: integer
    required:
    - amount
    type: object
  input.LoginInput:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  input.ProductInput:
    properties:
      category_id:
        type: integer
      description:
        type: string
      name:
        type: string
      rent_cost:
        type: integer
      stock:
        type: integer
    required:
    - category_id
    - description
    - name
    - rent_cost
    - stock
    type: object
  input.RegisterUserInput:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  input.SubmitPaymentRequest:
    properties:
      bank_transfer:
        description: OrderID      int
        type: string
      payment_type:
        type: string
    type: object
  input.UpdateUserInput:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
host: rental-camera-6a4d1d4fd45f.herokuapp.com
info:
  contact: {}
  description: Sweager service API in Go using Gin framework
  title: Sweager Midtrans API
paths:
  /api/bookings:
    get:
      description: Retrieve a list of all bookings.
      produces:
      - application/json
      responses:
        "200":
          description: List of bookings
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Get all bookings
      tags:
      - Bookings
    post:
      consumes:
      - application/json
      description: Create a booking for the current user with the provided booking
        details.
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Booking details
        in: body
        name: booking
        required: true
        schema:
          $ref: '#/definitions/input.BookingInput'
      produces:
      - application/json
      responses:
        "201":
          description: Booking successfully created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid input
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create a new booking
      tags:
      - Bookings
  /api/bookings/{id}:
    delete:
      description: Delete a booking by its ID.
      parameters:
      - description: Booking ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Booking deleted successfully
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete booking
      tags:
      - Bookings
    get:
      description: Retrieve a booking by its ID.
      parameters:
      - description: Booking ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Booking details
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Booking not found
          schema:
            additionalProperties: true
            type: object
      summary: Get booking by ID
      tags:
      - Bookings
  /api/category:
    get:
      description: Retrieve all categories
      produces:
      - application/json
      responses:
        "200":
          description: List of categories
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Error retrieving categories
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Get all categories
      tags:
      - Categories
    post:
      consumes:
      - application/json
      description: Create a new category with the provided name
      parameters:
      - description: Category details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/input.CategoryInput'
      produces:
      - application/json
      responses:
        "200":
          description: Category successfully created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "422":
          description: Validation error
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create new category
      tags:
      - Categories
  /api/category/{id}:
    delete:
      description: Delete a category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Category successfully deleted
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Category not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      - BearerAuth: []
      summary: Delete category
      tags:
      - Categories
    get:
      description: Retrieve a specific category using its ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Category details
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Category not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Get category by ID
      tags:
      - Categories
    put:
      consumes:
      - application/json
      description: Update a category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated category details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/input.CategoryInput'
      produces:
      - application/json
      responses:
        "200":
          description: Category successfully updated
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "422":
          description: Validation error
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update category
      tags:
      - Categories
  /api/payment/{id}:
    post:
      consumes:
      - application/json
      description: Process a payment for a top-up transaction using the provided payment
        details and payment ID from the URL.
      parameters:
      - description: Top-Up Payment ID
        in: path
        name: id
        required: true
        type: string
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Payment details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/input.SubmitPaymentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successful payment response
          schema:
            $ref: '#/definitions/entity.DoPayment'
        "400":
          description: Invalid request payload
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Process a top-up payment
      tags:
      - PaymentSaldo
  /api/payment/notification:
    post:
      consumes:
      - application/json
      description: Handle the notification from Midtrans regarding the top-up payment
        and update the payment status accordingly.
      parameters:
      - description: Midtrans notification payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entity.MidtransNotificationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: top up was successful
          schema:
            type: string
        "400":
          description: Invalid request payload
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Process payment notification
      tags:
      - PaymentSaldo
  /api/product:
    get:
      description: Retrieve all products
      produces:
      - application/json
      responses:
        "200":
          description: List of products
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Error retrieving products
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Get all products
      tags:
      - Products
    post:
      consumes:
      - application/json
      description: Create a new product with the given details
      parameters:
      - description: Product details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/input.ProductInput'
      produces:
      - application/json
      responses:
        "200":
          description: Product successfully created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "422":
          description: Validation error
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create a new product
      tags:
      - Products
  /api/product/{id}:
    delete:
      description: Delete a product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Product successfully deleted
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Product not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      - BearerAuth: []
      summary: Delete a product
      tags:
      - Products
    get:
      description: Retrieve a specific product using its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Product details
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Product not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Get a product by ID
      tags:
      - Products
    put:
      consumes:
      - application/json
      description: Update an existing product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated product details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/input.ProductInput'
      produces:
      - application/json
      responses:
        "200":
          description: Product successfully updated
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "422":
          description: Validation error
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update a product
      tags:
      - Products
  /api/topup:
    post:
      consumes:
      - application/json
      description: Create a top-up transaction for the current user with the provided
        amount
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Top-up details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/input.InputTopUp'
      produces:
      - application/json
      responses:
        "200":
          description: Top-up successfully created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "422":
          description: Validation error
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new top-up transaction
      tags:
      - TopUp
  /api/topup/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve the details of a top-up transaction by its ID
      parameters:
      - description: Top-up Transaction ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Top-up transaction details
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get top-up transaction details
      tags:
      - TopUp
  /api/user/{slug}:
    delete:
      description: Delete a user
      parameters:
      - description: Slug User ID
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "422":
          description: Unprocessable Entity
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update user details by ID
      parameters:
      - description: User Slug
        in: path
        name: slug
        required: true
        type: string
      - description: User information for update
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/input.UpdateUserInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "422":
          description: Unprocessable Entity
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update user information
      tags:
      - Users
  /api/user/login:
    post:
      consumes:
      - application/json
      description: Log in an existing user using email and password
      parameters:
      - description: User login credentials
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/input.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "422":
          description: Unprocessable Entity
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: User login
      tags:
      - Users
  /api/user/register:
    post:
      consumes:
      - application/json
      description: Register a new user with the provided information
      parameters:
      - description: User registration details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/input.RegisterUserInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties: true
            type: object
        "422":
          description: Unprocessable Entity
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Register new user
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
